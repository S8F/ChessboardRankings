@page "/leaderboards"
@using ChessboardRankings.Data
@using ChessboardRankings.Services
@inject LeaderboardService LeaderboardService

<PageTitle>Chess.com Leaderboards</PageTitle>

<h1>Chess.com Leaderboards</h1>

@if (leaderboardsData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="leaderboard-container">
        <div class="leaderboard-tabs">
            <button class="tab-button @(selectedCategory == "daily" ? "active" : "")" @onclick="@(() => SelectCategory("daily"))">Daily</button>
            <button class="tab-button @(selectedCategory == "rapid" ? "active" : "")" @onclick="@(() => SelectCategory("rapid"))">Rapid</button>
            <button class="tab-button @(selectedCategory == "blitz" ? "active" : "")" @onclick="@(() => SelectCategory("blitz"))">Blitz</button>
            <button class="tab-button @(selectedCategory == "bullet" ? "active" : "")" @onclick="@(() => SelectCategory("bullet"))">Bullet</button>
            <button class="tab-button @(selectedCategory == "tactics" ? "active" : "")" @onclick="@(() => SelectCategory("tactics"))">Tactics</button>
        </div>

        <div class="leaderboard-content">
            <h2>@selectedCategory.ToUpper() Leaderboard</h2>
            
            @if (GetSelectedPlayers() != null && GetSelectedPlayers().Any())
            {
                <div class="players-grid">
                    @foreach (var player in GetSelectedPlayers().Take(15))
                    {
                        <div class="player-card">
                            <div class="player-rank">
								<span>Rank - @player.rank</span>
							</div>
                            <div class="player-info">
                                <div class="player-avatar">
                                    <img src="@player.avatar" alt="@player.username" />
                                </div>
                                <div class="player-details">
                                    <h3>@player.username</h3>
                                    @if (!string.IsNullOrEmpty(player.name))
                                    {
                                        <p class="player-name">@player.name</p>
                                    }
                                    @if (!string.IsNullOrEmpty(player.title))
                                    {
                                        <span class="player-title">@player.title</span>
                                    }
                                </div>
                            </div>
                            <div class="player-stats">
                                <div class="score">
                                    <strong>@player.score</strong>
                                    <span>Rating</span>
                                </div>
                                <div class="games">
                                    <div class="game-stat wins">W: @player.win_count</div>
                                    <div class="game-stat losses">L: @player.loss_count</div>
                                    <div class="game-stat draws">D: @player.draw_count</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No data available for this category.</p>
            }
        </div>
    </div>
}

@code {
    private Data.Leaderboards? leaderboardsData;
    private string selectedCategory = "daily";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            leaderboardsData = await LeaderboardService.GetLeaderboardsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leaderboards: {ex.Message}");
        }
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private List<Player>? GetSelectedPlayers()
    {
        if (leaderboardsData == null) return null;

        return selectedCategory switch
        {
            "daily" => leaderboardsData.daily,
            "rapid" => leaderboardsData.rapid,
            "blitz" => leaderboardsData.blitz,
            "bullet" => leaderboardsData.bullet,
            "tactics" => leaderboardsData.tactics,
            _ => leaderboardsData.daily
        };
    }
}

<style>
    .leaderboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-bottom:5rem !important;
    }

    .leaderboard-tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 30px;
        border-bottom: 2px solid #e0e0e0;
    }

    .tab-button {
        padding: 12px 24px;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        color: #666;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
    }

    .tab-button:hover {
        color: #333;
        background-color: #f5f5f5;
    }

    .tab-button.active {
        color: #2c5530;
        border-bottom-color: #2c5530;
        background-color: #f8f9fa;
    }

    .leaderboard-content h2 {
        color: #2c5530;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .players-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .player-card {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .player-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .player-rank {
        font-size: 18px;
        font-weight: bold;
        color: #2c5530;
        margin-bottom: 12px;
    }

    .player-info {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

    .player-avatar img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
    }

    .player-details h3 {
        margin: 0;
        font-size: 16px;
        color: #333;
    }

    .player-name {
        margin: 4px 0;
        font-size: 14px;
        color: #666;
    }

    .player-title {
        background: #2c5530;
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
    }

    .player-stats {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .score {
        text-align: center;
    }

    .score strong {
        display: block;
        font-size: 20px;
        color: #2c5530;
    }

    .score span {
        font-size: 12px;
        color: #666;
    }

    .games {
        display: flex;
        gap: 8px;
    }

    .game-stat {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
    }

    .wins {
        background: #d4edda;
        color: #155724;
    }

    .losses {
        background: #f8d7da;
        color: #721c24;
    }

    .draws {
        background: #fff3cd;
        color: #856404;
    }

    @@media (max-width: 768px) {
        .players-grid {
            grid-template-columns: 1fr;
        }
        
        .leaderboard-tabs {
            flex-wrap: wrap;
        }
        
        .tab-button {
            flex: 1;
            min-width: 80px;
        }
    }
</style>

